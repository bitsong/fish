/*
 *  ======== Dsp.cfg ========
 *
 */
/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* application uses the following modules and packages */
var GateHwi = xdc.useModule('ti.sysbios.gates.GateHwi');
var Task 	= xdc.useModule('ti.sysbios.knl.Task');
var BIOS 	= xdc.useModule('ti.sysbios.BIOS');
var Cache   = xdc.useModule('ti.sysbios.family.c64p.Cache');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBufMP = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
var Memory = xdc.useModule('xdc.runtime.Memory');
var Timer = xdc.useModule('ti.sysbios.timers.timer64.Timer');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var System 	= xdc.useModule('xdc.runtime.System');
var SysStd 	= xdc.useModule('xdc.runtime.SysStd');
var SysMin 	= xdc.useModule('xdc.runtime.SysMin');

//var cache   = xdc.useModule('ti.sysbios.hal.Cache');
var Idle    = xdc.useModule('ti.sysbios.knl.Idle');
var Queue   = xdc.useModule('ti.sysbios.knl.Queue');
var ECM     = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');

BIOS.libType = BIOS.LibType_NonInstrumented;
System.SupportProxy = SysMin
/*
 *  ======== Operating System Configuration ========
 */
/* no rts heap */
Program.heap = 0x8000;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x1000;

/* create a default heap */
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x30000;
heapMemParams.sectionName = "systemHeap";
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);



/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
ECM.eventGroupHwiNum[0] = 7;
ECM.eventGroupHwiNum[1] = 8;
ECM.eventGroupHwiNum[2] = 9;
ECM.eventGroupHwiNum[3] = 10;

var Edma = xdc.loadPackage('ti.sdo.edma3.drv');

/*
 *  ======== IPC Configuration ========
 */
/* required because SysLink is running on the host processor */
xdc.useModule('ti.syslink.ipc.rtos.Syslink');

/* configure processor names */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
var procNameAry = MultiProc.getDeviceProcNames();
MultiProc.setConfig("DSP", procNameAry);

/* ipc configuration */
var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
/* ipc setup for SR0 Memory (host processor not running Sys/Bios) */
Ipc.sr0MemorySetup = false;
/* set ipc sync to pair, requiring Ipc_attach() call on all processors */
Ipc.procSync = Ipc.ProcSync_PAIR;
/* define host processor */
Ipc.hostProcId = MultiProc.getIdMeta("HOST");

/* enable the second interrupt line */
var NotifySetup = xdc.useModule('ti.sdo.ipc.family.da830.NotifySetup');
NotifySetup.useSecondLine = true;
    
/* shared region configuration */
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');

/* configure SharedRegion #0 (IPC) */
var SR0Mem = Program.cpu.memoryMap["SR_0"];

SharedRegion.setEntryMeta(0,
    new SharedRegion.Entry({
        name:           "SR0",
        base:           SR0Mem.base,
        len:            SR0Mem.len,
        ownerProcId:    MultiProc.getIdMeta("HOST"),
        cacheEnable:    false,
        isValid:        true
    })
);

/* configure SharedRegion #1 (MESSAGEQ) */
var SR1Mem = Program.cpu.memoryMap["SR_1"];

SharedRegion.setEntryMeta(1,
    new SharedRegion.Entry({
        name:           "SR1",
        base:           SR1Mem.base,
        len:            SR1Mem.len,
        ownerProcId:    MultiProc.getIdMeta("HOST"),
        cacheEnable:    false,
        isValid:        true
    })
);

/* configure SharedRegion #2 (GENERAL) */
var SR2Mem = Program.cpu.memoryMap["SR_2"];

SharedRegion.setEntryMeta(2,
    new SharedRegion.Entry({
        name:           "SR2",
        base:           SR2Mem.base,
        len:            SR2Mem.len,
        ownerProcId:    MultiProc.getIdMeta("HOST"),
        cacheEnable:    false,
        isValid:        true
    })
);

/* configure SharedRegion #3 (RINGIO) */
var SR3Mem = Program.cpu.memoryMap["SR_3"];

SharedRegion.setEntryMeta(3,
    new SharedRegion.Entry({
        name:           "SR3",
        base:           SR3Mem.base,
        len:            SR3Mem.len,
        ownerProcId:    MultiProc.getIdMeta("HOST"),
        cacheEnable:    false,
        isValid:        true
    })
);
/*  configure external memory cache property
 *
 *  C000_0000 - C7FF_FFFF   800_0000  ( 128 MB) Cache.MAR192_223
 *  ------------------------------------------------------------------------
 *  C000_0000 - C1FF_FFFF   200_0000  (  32 MB) --------  don't care
 *  C200_0000 - C200_0FFF		1000  (  4k   ) ------	  don't care
 *  C200_1000 - C210_0FFF    10_0000  (  1M   ) SR_0	  no-cache      MAR194
 *  C210_1000 - C250_0FFF    40_0000  (  4M   ) SR_1	  no-cache      MAR194(messageq)
 *  C250_100O - C28F_EFFF    3F_E000  ( ~4M-8K) SR_2	  no-cache      MAR194(general purpose)
 *  C28F_F000 - C2FF_EFFF    70_0000  (  7M   ) SR_3	  no-cache      MAR194(ringio)
 *  C2FF_F000 - C2FF_FFFF		1000  (  4k   ) ------	  don't care
 *  C300_0000 - C3FF_EFFF    FF_F000  (~16M-4k) DSP_PROG  cache enable  MAR195(code, data)
 *  C3FF_F000 - C3FF_FFFF       1000  (  4k   ) ------	  don't care
 *  C400_0000 - C7FF_FFFF   400_0000  (  64 MB) Linux	  don't care
 *
*/
Cache.MAR192_223   = 0x00000008;  /* xxxx xxxx xxxx xxxx xxxx xxxx xxxx 10xx */


/* configure SysBios to use the lower half of Timer 1 */
Timer.timerSettings[1].master = true;
Timer.defaultHalf = Timer.Half_LOWER;
Clock.timerId = 1;





